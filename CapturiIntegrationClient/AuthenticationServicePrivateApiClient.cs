//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace webhooks_demo.CapturiIntegrationClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAuthenticationServicePrivateApiClient
    {
        /// <summary>
        /// List audits in time window
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Request model</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationAuditListResponseModel> IntegrationsAuditsAsync(string api_version, IntegrationAuditListRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List audits in time window
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Request model</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationAuditListResponseModel> IntegrationsAuditsAsync(string api_version, IntegrationAuditListRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all comments for conversation, sorted by created (ascending)
        /// </summary>
        /// <remarks>
        /// Returns &lt;em&gt;all&lt;/em&gt; comments, regardless of access
        /// </remarks>
        /// <param name="conversationUid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsForConversationAsync(System.Guid conversationUid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all comments for conversation, sorted by created (ascending)
        /// </summary>
        /// <remarks>
        /// Returns &lt;em&gt;all&lt;/em&gt; comments, regardless of access
        /// </remarks>
        /// <param name="conversationUid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsForConversationAsync(System.Guid conversationUid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all comments across all conversations created in the time window specified
        /// </summary>
        /// <param name="from">Created from (inclusive)</param>
        /// <param name="to">Created to (inclusive)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsAsync(System.DateTimeOffset? from, System.DateTimeOffset? to, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all comments across all conversations created in the time window specified
        /// </summary>
        /// <param name="from">Created from (inclusive)</param>
        /// <param name="to">Created to (inclusive)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsAsync(System.DateTimeOffset? from, System.DateTimeOffset? to, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List conversations
        /// </summary>
        /// <remarks>
        /// List conversations with the full data model, not just a slimmed list-specific model. Also includes the raw
        /// <br/>sentiment scores as numerical values.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Filters for which conversations to list, how many and ordering</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationConversationListFullResponseModel> IntegrationsConversationsListFullAsync(string api_version, PaginatedConversationFiltersRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List conversations
        /// </summary>
        /// <remarks>
        /// List conversations with the full data model, not just a slimmed list-specific model. Also includes the raw
        /// <br/>sentiment scores as numerical values.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Filters for which conversations to list, how many and ordering</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationConversationListFullResponseModel> IntegrationsConversationsListFullAsync(string api_version, PaginatedConversationFiltersRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List conversations changed since provided last changed, in date-range
        /// </summary>
        /// <remarks>
        /// Will list all conversations in specified date-range optionally only those which have changed (_if any_)
        /// <br/>since the provided `LastChanged`.
        /// <br/>            
        /// <br/>This is useful to fetch changes, where you have previously fetched conversations for a given date-range and
        /// <br/>now want to update, but without having to fetch all conversations again.
        /// <br/>            
        /// <br/>In such a case, one could just call with `LastChanged = "time of last fetch"`, which would then only return
        /// <br/>those conversations which have changed (_if any_) since that time of last fetch.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Date-range to fetch for, and all other options for fetching</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationConversationListDeltaResponseModel> IntegrationsConversationsListDeltaAsync(string api_version, IntegrationConversationListDeltaRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List conversations changed since provided last changed, in date-range
        /// </summary>
        /// <remarks>
        /// Will list all conversations in specified date-range optionally only those which have changed (_if any_)
        /// <br/>since the provided `LastChanged`.
        /// <br/>            
        /// <br/>This is useful to fetch changes, where you have previously fetched conversations for a given date-range and
        /// <br/>now want to update, but without having to fetch all conversations again.
        /// <br/>            
        /// <br/>In such a case, one could just call with `LastChanged = "time of last fetch"`, which would then only return
        /// <br/>those conversations which have changed (_if any_) since that time of last fetch.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Date-range to fetch for, and all other options for fetching</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationConversationListDeltaResponseModel> IntegrationsConversationsListDeltaAsync(string api_version, IntegrationConversationListDeltaRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get conversation
        /// </summary>
        /// <remarks>
        /// Get conversation by it's identity, with full data model including raw sentiment score as numerical values.
        /// </remarks>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationConversationView> IntegrationsConversationsAsync(System.Guid uid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get conversation
        /// </summary>
        /// <remarks>
        /// Get conversation by it's identity, with full data model including raw sentiment score as numerical values.
        /// </remarks>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationConversationView> IntegrationsConversationsAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get transcript file for the conversation
        /// </summary>
        /// <param name="conversationUid">Identity</param>
        /// <param name="anonymize">Should not already anonymized conversations be anonymized</param>
        /// <param name="format">Wanted output format</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation transcript</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task IntegrationsConversationsTranscriptAsync(System.Guid conversationUid, bool? anonymize, ConversationTranscriptTypeRequestModel? format, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get transcript file for the conversation
        /// </summary>
        /// <param name="conversationUid">Identity</param>
        /// <param name="anonymize">Should not already anonymized conversations be anonymized</param>
        /// <param name="format">Wanted output format</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation transcript</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task IntegrationsConversationsTranscriptAsync(System.Guid conversationUid, bool? anonymize, ConversationTranscriptTypeRequestModel? format, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update conversation metadata
        /// </summary>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">New conversation metadata</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConversationView> IntegrationsConversationsMetadataAsync(System.Guid uid, string api_version, ConversationMetadataRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update conversation metadata
        /// </summary>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">New conversation metadata</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConversationView> IntegrationsConversationsMetadataAsync(System.Guid uid, string api_version, ConversationMetadataRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List filters
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupListResponseModel> IntegrationsFiltersGetAsync(string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List filters
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupListResponseModel> IntegrationsFiltersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get filter
        /// </summary>
        /// <param name="uid">Filter identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupView> IntegrationsFiltersGetAsync(System.Guid uid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get filter
        /// </summary>
        /// <param name="uid">Filter identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupView> IntegrationsFiltersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderListResponseModel> IntegrationsFiltersFoldersGetAsync(string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderListResponseModel> IntegrationsFiltersFoldersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderView> IntegrationsFiltersFoldersGetAsync(System.Guid uid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderView> IntegrationsFiltersFoldersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List trackers
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerListResponseModel> IntegrationsTrackersGetAsync(string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List trackers
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerListResponseModel> IntegrationsTrackersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get tracker
        /// </summary>
        /// <param name="uid">Tracker identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerView> IntegrationsTrackersGetAsync(System.Guid uid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tracker
        /// </summary>
        /// <param name="uid">Tracker identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerView> IntegrationsTrackersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerFolderListResponseModel> IntegrationsTrackersFoldersGetAsync(string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerFolderListResponseModel> IntegrationsTrackersFoldersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerFolderView> IntegrationsTrackersFoldersGetAsync(System.Guid uid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IntegrationTrackerFolderView> IntegrationsTrackersFoldersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Calculate live topics based on filters and return topics and reference for further requests
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLivePostAsync(RoleView? role, string api_version, ConversationFiltersRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculate live topics based on filters and return topics and reference for further requests
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLivePostAsync(RoleView? role, string api_version, ConversationFiltersRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get live topics for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveGetAsync(System.Guid liveTopicsUid, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get live topics for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveGetAsync(System.Guid liveTopicsUid, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get topic details for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TopicDetailsView> IntegrationsTrendsLiveTopicsDetailsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic details for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TopicDetailsView> IntegrationsTrendsLiveTopicsDetailsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get topic trends for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveTopicsTrendsAsync(System.Guid liveTopicsUid, int topicIndex, RoleView? targetRole, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic trends for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveTopicsTrendsAsync(System.Guid liveTopicsUid, int topicIndex, RoleView? targetRole, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get topic phrases for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicPhrasesResponseModel> IntegrationsTrendsLiveTopicsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic phrases for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicPhrasesResponseModel> IntegrationsTrendsLiveTopicsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get topic conversations for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic conversations for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LiveTopicConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get phrase conversations for the specified liveTopicsUid and topicIndex
        /// <br/>and phraseIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsPhrasesConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int phraseIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get phrase conversations for the specified liveTopicsUid and topicIndex
        /// <br/>and phraseIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsPhrasesConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int phraseIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticationServicePrivateApiClient : IAuthenticationServicePrivateApiClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public AuthenticationServicePrivateApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            [System.Diagnostics.CodeAnalysis.MemberNotNull(nameof(_baseUrl))]
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// List audits in time window
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Request model</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationAuditListResponseModel> IntegrationsAuditsAsync(string api_version, IntegrationAuditListRequestModel body)
        {
            return IntegrationsAuditsAsync(api_version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List audits in time window
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Request model</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationAuditListResponseModel> IntegrationsAuditsAsync(string api_version, IntegrationAuditListRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/audits"
                    urlBuilder_.Append("integrations/audits");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationAuditListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all comments for conversation, sorted by created (ascending)
        /// </summary>
        /// <remarks>
        /// Returns &lt;em&gt;all&lt;/em&gt; comments, regardless of access
        /// </remarks>
        /// <param name="conversationUid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsForConversationAsync(System.Guid conversationUid, string api_version)
        {
            return IntegrationsCommentsForConversationAsync(conversationUid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all comments for conversation, sorted by created (ascending)
        /// </summary>
        /// <remarks>
        /// Returns &lt;em&gt;all&lt;/em&gt; comments, regardless of access
        /// </remarks>
        /// <param name="conversationUid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsForConversationAsync(System.Guid conversationUid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (conversationUid == null)
                throw new System.ArgumentNullException("conversationUid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/comments/for-conversation/{conversationUid}"
                    urlBuilder_.Append("integrations/comments/for-conversation/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(conversationUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationCommentListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all comments across all conversations created in the time window specified
        /// </summary>
        /// <param name="from">Created from (inclusive)</param>
        /// <param name="to">Created to (inclusive)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsAsync(System.DateTimeOffset? from, System.DateTimeOffset? to, string api_version)
        {
            return IntegrationsCommentsAsync(from, to, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all comments across all conversations created in the time window specified
        /// </summary>
        /// <param name="from">Created from (inclusive)</param>
        /// <param name="to">Created to (inclusive)</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationCommentListResponseModel> IntegrationsCommentsAsync(System.DateTimeOffset? from, System.DateTimeOffset? to, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/comments"
                    urlBuilder_.Append("integrations/comments");
                    urlBuilder_.Append('?');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationCommentListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List conversations
        /// </summary>
        /// <remarks>
        /// List conversations with the full data model, not just a slimmed list-specific model. Also includes the raw
        /// <br/>sentiment scores as numerical values.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Filters for which conversations to list, how many and ordering</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationConversationListFullResponseModel> IntegrationsConversationsListFullAsync(string api_version, PaginatedConversationFiltersRequestModel body)
        {
            return IntegrationsConversationsListFullAsync(api_version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List conversations
        /// </summary>
        /// <remarks>
        /// List conversations with the full data model, not just a slimmed list-specific model. Also includes the raw
        /// <br/>sentiment scores as numerical values.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Filters for which conversations to list, how many and ordering</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationConversationListFullResponseModel> IntegrationsConversationsListFullAsync(string api_version, PaginatedConversationFiltersRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/conversations/list-full"
                    urlBuilder_.Append("integrations/conversations/list-full");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationConversationListFullResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Problems with one or more provided arguments", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List conversations changed since provided last changed, in date-range
        /// </summary>
        /// <remarks>
        /// Will list all conversations in specified date-range optionally only those which have changed (_if any_)
        /// <br/>since the provided `LastChanged`.
        /// <br/>            
        /// <br/>This is useful to fetch changes, where you have previously fetched conversations for a given date-range and
        /// <br/>now want to update, but without having to fetch all conversations again.
        /// <br/>            
        /// <br/>In such a case, one could just call with `LastChanged = "time of last fetch"`, which would then only return
        /// <br/>those conversations which have changed (_if any_) since that time of last fetch.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Date-range to fetch for, and all other options for fetching</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationConversationListDeltaResponseModel> IntegrationsConversationsListDeltaAsync(string api_version, IntegrationConversationListDeltaRequestModel body)
        {
            return IntegrationsConversationsListDeltaAsync(api_version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List conversations changed since provided last changed, in date-range
        /// </summary>
        /// <remarks>
        /// Will list all conversations in specified date-range optionally only those which have changed (_if any_)
        /// <br/>since the provided `LastChanged`.
        /// <br/>            
        /// <br/>This is useful to fetch changes, where you have previously fetched conversations for a given date-range and
        /// <br/>now want to update, but without having to fetch all conversations again.
        /// <br/>            
        /// <br/>In such a case, one could just call with `LastChanged = "time of last fetch"`, which would then only return
        /// <br/>those conversations which have changed (_if any_) since that time of last fetch.
        /// </remarks>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">Date-range to fetch for, and all other options for fetching</param>
        /// <returns>Conversations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationConversationListDeltaResponseModel> IntegrationsConversationsListDeltaAsync(string api_version, IntegrationConversationListDeltaRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/conversations/list-delta"
                    urlBuilder_.Append("integrations/conversations/list-delta");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationConversationListDeltaResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Problems with one or more provided arguments", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get conversation
        /// </summary>
        /// <remarks>
        /// Get conversation by it's identity, with full data model including raw sentiment score as numerical values.
        /// </remarks>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationConversationView> IntegrationsConversationsAsync(System.Guid uid, string api_version)
        {
            return IntegrationsConversationsAsync(uid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get conversation
        /// </summary>
        /// <remarks>
        /// Get conversation by it's identity, with full data model including raw sentiment score as numerical values.
        /// </remarks>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationConversationView> IntegrationsConversationsAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/conversations/{uid}"
                    urlBuilder_.Append("integrations/conversations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationConversationView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conversation not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Problems with one or more provided arguments", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get transcript file for the conversation
        /// </summary>
        /// <param name="conversationUid">Identity</param>
        /// <param name="anonymize">Should not already anonymized conversations be anonymized</param>
        /// <param name="format">Wanted output format</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation transcript</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task IntegrationsConversationsTranscriptAsync(System.Guid conversationUid, bool? anonymize, ConversationTranscriptTypeRequestModel? format, string api_version)
        {
            return IntegrationsConversationsTranscriptAsync(conversationUid, anonymize, format, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get transcript file for the conversation
        /// </summary>
        /// <param name="conversationUid">Identity</param>
        /// <param name="anonymize">Should not already anonymized conversations be anonymized</param>
        /// <param name="format">Wanted output format</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Conversation transcript</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task IntegrationsConversationsTranscriptAsync(System.Guid conversationUid, bool? anonymize, ConversationTranscriptTypeRequestModel? format, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (conversationUid == null)
                throw new System.ArgumentNullException("conversationUid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/conversations/{conversationUid}/transcript"
                    urlBuilder_.Append("integrations/conversations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(conversationUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transcript");
                    urlBuilder_.Append('?');
                    if (anonymize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("anonymize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(anonymize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Problems with one or more provided arguments", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update conversation metadata
        /// </summary>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">New conversation metadata</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ConversationView> IntegrationsConversationsMetadataAsync(System.Guid uid, string api_version, ConversationMetadataRequestModel body)
        {
            return IntegrationsConversationsMetadataAsync(uid, api_version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update conversation metadata
        /// </summary>
        /// <param name="uid">Conversation identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <param name="body">New conversation metadata</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConversationView> IntegrationsConversationsMetadataAsync(System.Guid uid, string api_version, ConversationMetadataRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/conversations/{uid}/metadata"
                    urlBuilder_.Append("integrations/conversations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/metadata");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConversationView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List filters
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationSavedFilterGroupListResponseModel> IntegrationsFiltersGetAsync(string api_version)
        {
            return IntegrationsFiltersGetAsync(api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List filters
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationSavedFilterGroupListResponseModel> IntegrationsFiltersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/filters"
                    urlBuilder_.Append("integrations/filters");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationSavedFilterGroupListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get filter
        /// </summary>
        /// <param name="uid">Filter identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationSavedFilterGroupView> IntegrationsFiltersGetAsync(System.Guid uid, string api_version)
        {
            return IntegrationsFiltersGetAsync(uid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get filter
        /// </summary>
        /// <param name="uid">Filter identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Filter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationSavedFilterGroupView> IntegrationsFiltersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/filters/{uid}"
                    urlBuilder_.Append("integrations/filters/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationSavedFilterGroupView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Filter not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderListResponseModel> IntegrationsFiltersFoldersGetAsync(string api_version)
        {
            return IntegrationsFiltersFoldersGetAsync(api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderListResponseModel> IntegrationsFiltersFoldersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/filters/folders"
                    urlBuilder_.Append("integrations/filters/folders");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationSavedFilterGroupFolderListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderView> IntegrationsFiltersFoldersGetAsync(System.Guid uid, string api_version)
        {
            return IntegrationsFiltersFoldersGetAsync(uid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationSavedFilterGroupFolderView> IntegrationsFiltersFoldersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/filters/folders/{uid}"
                    urlBuilder_.Append("integrations/filters/folders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationSavedFilterGroupFolderView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Folder not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List trackers
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationTrackerListResponseModel> IntegrationsTrackersGetAsync(string api_version)
        {
            return IntegrationsTrackersGetAsync(api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List trackers
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationTrackerListResponseModel> IntegrationsTrackersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trackers"
                    urlBuilder_.Append("integrations/trackers");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationTrackerListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get tracker
        /// </summary>
        /// <param name="uid">Tracker identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationTrackerView> IntegrationsTrackersGetAsync(System.Guid uid, string api_version)
        {
            return IntegrationsTrackersGetAsync(uid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tracker
        /// </summary>
        /// <param name="uid">Tracker identity</param>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Tracker</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationTrackerView> IntegrationsTrackersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trackers/{uid}"
                    urlBuilder_.Append("integrations/trackers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationTrackerView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Tracker not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationTrackerFolderListResponseModel> IntegrationsTrackersFoldersGetAsync(string api_version)
        {
            return IntegrationsTrackersFoldersGetAsync(api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List folders
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationTrackerFolderListResponseModel> IntegrationsTrackersFoldersGetAsync(string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trackers/folders"
                    urlBuilder_.Append("integrations/trackers/folders");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationTrackerFolderListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IntegrationTrackerFolderView> IntegrationsTrackersFoldersGetAsync(System.Guid uid, string api_version)
        {
            return IntegrationsTrackersFoldersGetAsync(uid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get folder
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Folder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IntegrationTrackerFolderView> IntegrationsTrackersFoldersGetAsync(System.Guid uid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trackers/folders/{uid}"
                    urlBuilder_.Append("integrations/trackers/folders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IntegrationTrackerFolderView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Folder not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not allowed to perform action", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Calculate live topics based on filters and return topics and reference for further requests
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLivePostAsync(RoleView? role, string api_version, ConversationFiltersRequestModel body)
        {
            return IntegrationsTrendsLivePostAsync(role, api_version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculate live topics based on filters and return topics and reference for further requests
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLivePostAsync(RoleView? role, string api_version, ConversationFiltersRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live"
                    urlBuilder_.Append("integrations/trends/live");
                    urlBuilder_.Append('?');
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LiveTopicsView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get live topics for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveGetAsync(System.Guid liveTopicsUid, string api_version)
        {
            return IntegrationsTrendsLiveGetAsync(liveTopicsUid, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get live topics for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveGetAsync(System.Guid liveTopicsUid, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (liveTopicsUid == null)
                throw new System.ArgumentNullException("liveTopicsUid");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live/{liveTopicsUid}"
                    urlBuilder_.Append("integrations/trends/live/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(liveTopicsUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LiveTopicsView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get topic details for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TopicDetailsView> IntegrationsTrendsLiveTopicsDetailsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version)
        {
            return IntegrationsTrendsLiveTopicsDetailsAsync(liveTopicsUid, topicIndex, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic details for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TopicDetailsView> IntegrationsTrendsLiveTopicsDetailsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (liveTopicsUid == null)
                throw new System.ArgumentNullException("liveTopicsUid");

            if (topicIndex == null)
                throw new System.ArgumentNullException("topicIndex");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live/{liveTopicsUid}/topics/{topicIndex}/details"
                    urlBuilder_.Append("integrations/trends/live/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(liveTopicsUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/topics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(topicIndex, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/details");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TopicDetailsView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get topic trends for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveTopicsTrendsAsync(System.Guid liveTopicsUid, int topicIndex, RoleView? targetRole, string api_version)
        {
            return IntegrationsTrendsLiveTopicsTrendsAsync(liveTopicsUid, topicIndex, targetRole, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic trends for the specified liveTopicsUid
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LiveTopicsView> IntegrationsTrendsLiveTopicsTrendsAsync(System.Guid liveTopicsUid, int topicIndex, RoleView? targetRole, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (liveTopicsUid == null)
                throw new System.ArgumentNullException("liveTopicsUid");

            if (topicIndex == null)
                throw new System.ArgumentNullException("topicIndex");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live/{liveTopicsUid}/topics/{topicIndex}/trends"
                    urlBuilder_.Append("integrations/trends/live/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(liveTopicsUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/topics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(topicIndex, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/trends");
                    urlBuilder_.Append('?');
                    if (targetRole != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("targetRole")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(targetRole, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LiveTopicsView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get topic phrases for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LiveTopicPhrasesResponseModel> IntegrationsTrendsLiveTopicsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version)
        {
            return IntegrationsTrendsLiveTopicsAsync(liveTopicsUid, topicIndex, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic phrases for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LiveTopicPhrasesResponseModel> IntegrationsTrendsLiveTopicsAsync(System.Guid liveTopicsUid, int topicIndex, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (liveTopicsUid == null)
                throw new System.ArgumentNullException("liveTopicsUid");

            if (topicIndex == null)
                throw new System.ArgumentNullException("topicIndex");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live/{liveTopicsUid}/topics/{topicIndex}"
                    urlBuilder_.Append("integrations/trends/live/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(liveTopicsUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/topics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(topicIndex, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LiveTopicPhrasesResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get topic conversations for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LiveTopicConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version)
        {
            return IntegrationsTrendsLiveTopicsConversationsAsync(liveTopicsUid, topicIndex, pageNumber, pageSize, sortDirection, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get topic conversations for the specified liveTopicsUid and topicIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LiveTopicConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (liveTopicsUid == null)
                throw new System.ArgumentNullException("liveTopicsUid");

            if (topicIndex == null)
                throw new System.ArgumentNullException("topicIndex");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live/{liveTopicsUid}/topics/{topicIndex}/conversations"
                    urlBuilder_.Append("integrations/trends/live/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(liveTopicsUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/topics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(topicIndex, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/conversations");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LiveTopicConversationInfoListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get phrase conversations for the specified liveTopicsUid and topicIndex
        /// <br/>and phraseIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsPhrasesConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int phraseIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version)
        {
            return IntegrationsTrendsLiveTopicsPhrasesConversationsAsync(liveTopicsUid, topicIndex, phraseIndex, pageNumber, pageSize, sortDirection, api_version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get phrase conversations for the specified liveTopicsUid and topicIndex
        /// <br/>and phraseIndex
        /// </summary>
        /// <param name="api_version">The requested API version</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConversationInfoListResponseModel> IntegrationsTrendsLiveTopicsPhrasesConversationsAsync(System.Guid liveTopicsUid, int topicIndex, int phraseIndex, int? pageNumber, int? pageSize, SortDirection? sortDirection, string api_version, System.Threading.CancellationToken cancellationToken)
        {
            if (liveTopicsUid == null)
                throw new System.ArgumentNullException("liveTopicsUid");

            if (topicIndex == null)
                throw new System.ArgumentNullException("topicIndex");

            if (phraseIndex == null)
                throw new System.ArgumentNullException("phraseIndex");

            if (api_version == null)
                throw new System.ArgumentNullException("api_version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "integrations/trends/live/{liveTopicsUid}/topics/{topicIndex}/phrases/{phraseIndex}/conversations"
                    urlBuilder_.Append("integrations/trends/live/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(liveTopicsUid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/topics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(topicIndex, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/phrases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(phraseIndex, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/conversations");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortDirection != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortDirection")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDirection, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("api-version")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(api_version, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConversationInfoListResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageFieldView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Subject")]
        Subject = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageTypeView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inbound")]
        Inbound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Outbound")]
        Outbound = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoReply")]
        AutoReply = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AiInsightsView
    {
        [Newtonsoft.Json.JsonProperty("keyTopic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyTopic { get; set; }

        [Newtonsoft.Json.JsonProperty("keySubTopic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeySubTopic { get; set; }

        [Newtonsoft.Json.JsonProperty("rootCause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootCause { get; set; }

        [Newtonsoft.Json.JsonProperty("customSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomSummary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationMetadataView
    {
        [Newtonsoft.Json.JsonProperty("customProp1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp10 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomNumberProp10 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationMetricsView
    {
        /// <summary>
        /// When conversation was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created { get; set; }

        /// <summary>
        /// When conversation data was added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataAdded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DataAdded { get; set; }

        /// <summary>
        /// When metadata was added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataAdded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MetadataAdded { get; set; }

        /// <summary>
        /// When audio was added and when ASR was started by Capturi.Messages.Files.AudioFilesAddedV2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audioAdded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AudioAdded { get; set; }

        /// <summary>
        /// When processing has completed, regardless of outcome
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingDone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessingDone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationScoreParameterView
    {
        /// <summary>
        /// Parameter identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Calculated score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Score { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationScoreView
    {
        /// <summary>
        /// Score identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Calculated score `[0 - 10]`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Score { get; set; }

        /// <summary>
        /// Parameters of score and their calculated value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConversationScoreParameterView> Parameters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConversationStateView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NoRecognizedWords")]
        NoRecognizedWords = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NeedsSpeakerModel")]
        NeedsSpeakerModel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationView
    {
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationId { get; set; }

        [Newtonsoft.Json.JsonProperty("teamUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? TeamUid { get; set; }

        [Newtonsoft.Json.JsonProperty("userUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UserUid { get; set; }

        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConversationStateView State { get; set; }

        [Newtonsoft.Json.JsonProperty("externalIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalIdentity { get; set; }

        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("customerCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastChanged { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deleted { get; set; }

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string Summary { get; set; }

        [Newtonsoft.Json.JsonProperty("qaIsReviewed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool QaIsReviewed { get; set; }

        [Newtonsoft.Json.JsonProperty("qaReviewedByUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? QaReviewedByUserUid { get; set; }

        [Newtonsoft.Json.JsonProperty("qaReviewedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? QaReviewedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatisticsView Statistics { get; set; }

        [Newtonsoft.Json.JsonProperty("trackerHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackerHitView> TrackerHits { get; set; }

        [Newtonsoft.Json.JsonProperty("insights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsightsView Insights { get; set; }

        [Newtonsoft.Json.JsonProperty("aiInsights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AiInsightsView AiInsights { get; set; }

        [Newtonsoft.Json.JsonProperty("sentiment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SentimentScoreOnlyView Sentiment { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConversationMetadataView Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConversationMetricsView Metrics { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoredPhrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IgnoredPhraseView> IgnoredPhrases { get; set; }

        [Newtonsoft.Json.JsonProperty("scores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ConversationScoreView> Scores { get; set; }

        [Newtonsoft.Json.JsonProperty("hasAudio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAudio { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IgnoredPhraseReasonView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Context")]
        Context = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FalseRecognition")]
        FalseRecognition = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IgnoredPhraseView
    {
        /// <summary>
        /// Phrase that should be ignored in tracker calculations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phrase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phrase { get; set; }

        /// <summary>
        /// Reason for ignoring phrase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IgnoredPhraseReasonView Reason { get; set; }

        /// <summary>
        /// TimeOffset, the same phrase can be ignored multiple times with different timeoffsets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TimeOffset { get; set; }

        /// <summary>
        /// Why did you ignore the phrase. Can be used by capturi to improve speech recognition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// Only used when reason is context. Wrong Recognition will work across trackers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackerUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? TrackerUid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsightsView
    {
        /// <summary>
        /// Insights about the sales person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpeakerInsightView SalesPerson { get; set; }

        /// <summary>
        /// Insights about the other person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpeakerInsightView OtherPerson { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationConversationView : ConversationView
    {
        [Newtonsoft.Json.JsonProperty("sentimentRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSentimentRawView SentimentRaw { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSentimentRawView
    {
        [Newtonsoft.Json.JsonProperty("wordScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationWordScoreRawView WordScore { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationWordScoreRawView
    {
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? User { get; set; }

        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Other { get; set; }

        [Newtonsoft.Json.JsonProperty("combined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Combined { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonologueInsightView
    {
        /// <summary>
        /// Duration in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Duration { get; set; }

        /// <summary>
        /// Start time in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double From { get; set; }

        /// <summary>
        /// End time in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double To { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionView
    {
        /// <summary>
        /// Question text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Index of first word into full text transcription
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstWordIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FirstWordIndex { get; set; }

        /// <summary>
        /// Index of last word into full text transcription
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastWordIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LastWordIndex { get; set; }

        /// <summary>
        /// Offset into transcription mixed-audio when the question starts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double From { get; set; }

        /// <summary>
        /// Offset into transcription mixed-audio when the question ends
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double To { get; set; }

    }

    /// <summary>
    /// Conversation duration filtering
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationFiltersDurationRequestModel
    {
        /// <summary>
        /// Optional duration (minimum) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }

        /// <summary>
        /// Optional duration (maximum) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationFiltersRequestModel
    {
        /// <summary>
        /// Optional from-date (inclusive, date-part only) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromInclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FromInclusive { get; set; }

        /// <summary>
        /// Optional to-date (inclusive, date-part only) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toInclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ToInclusive { get; set; }

        /// <summary>
        /// Optional subjects (any-of) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Subjects { get; set; }

        /// <summary>
        /// Optional customers to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Customers { get; set; }

        /// <summary>
        /// Optional duration filtering
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConversationFiltersDurationRequestModel Duration { get; set; }

        /// <summary>
        /// Optional labels (any-of) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; }

        /// <summary>
        /// Optional key topic (any-of) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyTopics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KeyTopics { get; set; }

        /// <summary>
        /// Optional teams to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamUids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> TeamUids { get; set; }

        /// <summary>
        /// Optional status to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Optional users (any-of) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userUids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> UserUids { get; set; }

        /// <summary>
        /// Optional list of tracker filters that ALL must match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackerFilterRequestModel> Trackers { get; set; }

        /// <summary>
        /// Optional list of not-tracker filters that ALL must match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notTrackers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotTrackerFilterRequestModel> NotTrackers { get; set; }

        /// <summary>
        /// Optional sentiment filtering
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentiment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SentimentFilterRequestModel Sentiment { get; set; }

        /// <summary>
        /// Optional score filtering
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConversationScoreFilterRequestModel> Scores { get; set; }

        /// <summary>
        /// Optional external identity filtering
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalIdentity { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp10 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNumberPropFilterRequestModel CustomNumberProp10 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationMetadataRequestModel
    {
        [Newtonsoft.Json.JsonProperty("customProp1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp6", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp7", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp8", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp9", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp10", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomProp10 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp6", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp7", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp8", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp9", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp10", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CustomNumberProp10 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationScoreFilterRequestModel
    {
        /// <summary>
        /// Score identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Optional minimum score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Min { get; set; }

        /// <summary>
        /// Optional maximum score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max { get; set; }

        /// <summary>
        /// Optional score parameter which depending on Capturi.Features.Models.Conversations.Request.ConversationScoreFilterRequestModel.ParameterHasScore must have (or not) a score != 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ParameterUid { get; set; }

        /// <summary>
        /// Whether or not parameter should have score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterHasScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParameterHasScore { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CsvFieldRequestModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Uid")]
        Uid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Subject")]
        Subject = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Duration")]
        Duration = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserUid")]
        UserUid = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UserName")]
        UserName = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UserEmail")]
        UserEmail = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Label")]
        Label = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SpeakPercentUser")]
        SpeakPercentUser = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SpeakPercentCustomer")]
        SpeakPercentCustomer = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SpeakRateUser")]
        SpeakRateUser = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SpeakRateCustomer")]
        SpeakRateCustomer = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LongestMonologueUser")]
        LongestMonologueUser = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"LongestMonologueCustomer")]
        LongestMonologueCustomer = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerName")]
        TrackerName = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerUserHit")]
        TrackerUserHit = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerUserHitCount")]
        TrackerUserHitCount = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerCustomerHit")]
        TrackerCustomerHit = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerCustomerHitCount")]
        TrackerCustomerHitCount = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerWord")]
        TrackerWord = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerWordUserHits")]
        TrackerWordUserHits = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerWordCustomerHits")]
        TrackerWordCustomerHits = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackerTags")]
        TrackerTags = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SentimentWordScoreUser")]
        SentimentWordScoreUser = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"SentimentWordScoreOther")]
        SentimentWordScoreOther = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"SentimentWordScoreCombined")]
        SentimentWordScoreCombined = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Summary")]
        Summary = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ExternalIdentity")]
        ExternalIdentity = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp1")]
        CustomProp1 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp2")]
        CustomProp2 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp3")]
        CustomProp3 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp4")]
        CustomProp4 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp5")]
        CustomProp5 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp6")]
        CustomProp6 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp7")]
        CustomProp7 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp8")]
        CustomProp8 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp9")]
        CustomProp9 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomProp10")]
        CustomProp10 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp1")]
        CustomNumberProp1 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp2")]
        CustomNumberProp2 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp3")]
        CustomNumberProp3 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp4")]
        CustomNumberProp4 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp5")]
        CustomNumberProp5 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp6")]
        CustomNumberProp6 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp7")]
        CustomNumberProp7 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp8")]
        CustomNumberProp8 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp9")]
        CustomNumberProp9 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNumberProp10")]
        CustomNumberProp10 = 49,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomNumberPropFilterRequestModel
    {
        /// <summary>
        /// Optional minimum value for custom number property
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }

        /// <summary>
        /// Optional maximum value for custom number property
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportCsvRequestModel : ConversationFiltersRequestModel
    {
        [Newtonsoft.Json.JsonProperty("csvFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<CsvFieldRequestModel> CsvFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotTrackerFilterRequestModel
    {
        /// <summary>
        /// List of tracker uids that all must not have any hits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Uids { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedConversationFiltersRequestModel : ConversationFiltersRequestModel
    {
        /// <summary>
        /// Pagination page number (0-index)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Number of results to return per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

        /// <summary>
        /// Sort direction (0 = ascending, 1 = descending)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection SortDirection { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QaConversationFiltersRequestModel : ConversationFiltersRequestModel
    {
        /// <summary>
        /// Number of results to return per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SentimentFilterRequestModel
    {
        /// <summary>
        /// Sentiment score the speaker must have
        /// </summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SentimentScoreView Score { get; set; }

        /// <summary>
        /// Which speaker's sentiment score we are using
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speaker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SentimentSpeakerView Speaker { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackerFilterRequestModel
    {
        /// <summary>
        /// List of tracker uids where at least one of these must have a hit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Uids { get; set; }

        /// <summary>
        /// Optional speaker id, which must have at least one occurrence for any of the trackers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpeakerId { get; set; }

        /// <summary>
        /// Optional word, which must have at least one word-hit for any of the trackers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("word", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Word { get; set; }

        /// <summary>
        /// Negates the entire tracker filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inverted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Inverted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SentimentScoreOnlyView
    {
        [Newtonsoft.Json.JsonProperty("wordScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WordScoreView WordScore { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SentimentScoreView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SentimentSpeakerView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Combined")]
        Combined = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpeakerInsightView
    {
        /// <summary>
        /// Average words/minute speak rate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wordsPerMinute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WordsPerMinute { get; set; }

        /// <summary>
        /// Longest monologue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longestMonologue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MonologueInsightView LongestMonologue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpeakerStatisticsView
    {
        /// <summary>
        /// Details about this particular speaker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpeakerView Speaker { get; set; }

        /// <summary>
        /// List of time-intervals where this speaker spoke during the conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("when", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeIntervalView> When { get; set; }

        /// <summary>
        /// Questions asked by speaker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuestionView> Questions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpeakerView
    {
        /// <summary>
        /// Unique id for speaker within this conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SpeakerId { get; set; }

        /// <summary>
        /// How long (in seconds) in total this speaker has spoken for during this conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SpeakTime { get; set; }

        /// <summary>
        /// Number of questions this speaker has asked during this conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QuestionCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticsView
    {
        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpeakerStatisticsView SalesPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("otherPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpeakerStatisticsView OtherPerson { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeIntervalView
    {
        /// <summary>
        /// Offset into transcription mixed-audio when the speaker started talking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double From { get; set; }

        /// <summary>
        /// Offset into transcription mixed-audio when the speaker stopped talking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double To { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackerHitView
    {
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Words of the tracker and their hit data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("words", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackerWordHitView> Words { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackerWordHitOccurrenceView
    {
        /// <summary>
        /// Time (in seconds) when the hit occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("when", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double When { get; set; }

        /// <summary>
        /// Optional uid of the speaker user who said the word (_if a known user_)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakerUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? SpeakerUserUid { get; set; }

        /// <summary>
        /// Speaker identification unique to within this conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SpeakerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackerWordHitView
    {
        /// <summary>
        /// Number of times this word has been hit in total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("word", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Word { get; set; }

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Hits { get; set; }

        /// <summary>
        /// Details about each hit that occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackerWordHitOccurrenceView> Timeline { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConversationTranscriptTypeRequestModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Json")]
        Json = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WordScoreView
    {
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SentimentScoreView? User { get; set; }

        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SentimentScoreView? Other { get; set; }

        [Newtonsoft.Json.JsonProperty("combined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SentimentScoreView? Combined { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationAuditListRequestModel
    {
        [Newtonsoft.Json.JsonProperty("fromInclusive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset FromInclusive { get; set; }

        [Newtonsoft.Json.JsonProperty("toInclusive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ToInclusive { get; set; }

        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

        [Newtonsoft.Json.JsonProperty("sortDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection SortDirection { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationConversationListDeltaRequestModel
    {
        /// <summary>
        /// Start of date-range to include conversations, based on the conversation date `Conversation.DateTime`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromInclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FromInclusive { get; set; }

        /// <summary>
        /// End of date-range to include conversations, based on the conversation date `Conversation.DateTime`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toInclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ToInclusive { get; set; }

        /// <summary>
        /// Only include conversations last changed at, or after this specified date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastChanged { get; set; }

        /// <summary>
        /// Page number for pagination, 0-based
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Page size for pagination
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationAuditListResponseModel
    {
        [Newtonsoft.Json.JsonProperty("audits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationAuditLogRecordView> Audits { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationCommentListResponseModel
    {
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationCommentView> Comments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationConversationListDeltaResponseModel
    {
        [Newtonsoft.Json.JsonProperty("conversations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationConversationView> Conversations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationConversationListFullResponseModel
    {
        [Newtonsoft.Json.JsonProperty("conversations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationConversationView> Conversations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupFolderListResponseModel
    {
        /// <summary>
        /// Folders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationSavedFilterGroupFolderListView> Folders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupListResponseModel
    {
        [Newtonsoft.Json.JsonProperty("savedFilterGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationSavedFilterGroupListView> SavedFilterGroups { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerFolderListResponseModel
    {
        /// <summary>
        /// Folders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationTrackerFolderListView> Folders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerListResponseModel
    {
        /// <summary>
        /// List of trackers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationTrackerListView> Trackers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationAuditEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ConversationSoftDeleted")]
        ConversationSoftDeleted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ConversationHardDeleted")]
        ConversationHardDeleted = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationAuditLogRecordView
    {
        /// <summary>
        /// Time log event was stored
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LogTime { get; set; }

        /// <summary>
        /// Type of event
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationAuditEventType EventType { get; set; }

        /// <summary>
        /// When event originally occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EventTime { get; set; }

        /// <summary>
        /// User who triggered action, leading to event (when Capturi.Public.API.v2.ViewModels.Audits.IntegrationAuditLogRecordView.IsDeletedByPolicy is `false`)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UserUid { get; set; }

        /// <summary>
        /// Whether or not deletion was executed by policy or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDeletedByPolicy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDeletedByPolicy { get; set; }

        /// <summary>
        /// Organization event belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Conversation event is associated with
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ConversationUid { get; set; }

        /// <summary>
        /// DateTime of conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ConversationDateTime { get; set; }

        /// <summary>
        /// Customer of conversation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerPhone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationCommentView
    {
        /// <summary>
        /// Unique identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Conversation the comment belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ConversationUid { get; set; }

        /// <summary>
        /// User who created comment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedByUserUid { get; set; }

        /// <summary>
        /// Recipients of the comment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientUserUids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> RecipientUserUids { get; set; }

        /// <summary>
        /// Time (in seconds) into the audio, where the comment was attached
        /// </summary>
        [Newtonsoft.Json.JsonProperty("when", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double When { get; set; }

        /// <summary>
        /// Text of comment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// When the comment was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationSentimentScoreView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationSentimentSpeakerView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Combined")]
        Combined = 2,

    }

    /// <summary>
    /// Grants a permission level to everyone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationEveryonePermissionEntryView : IntegrationPermissionEntryView
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationEveryonePermissionEntryViewType Type { get; set; }

    }

    /// <summary>
    /// Granted level
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationGrantedLevelView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Edit")]
        Edit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 2,

    }

    /// <summary>
    /// Abstract permission which can be an entry on an Access Control List
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationPermissionEntryView
    {
        /// <summary>
        /// Granted level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationGrantedLevelView Level { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationPermissionPresetView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inherit")]
        Inherit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryoneCanView")]
        EveryoneCanView = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryoneCanEdit")]
        EveryoneCanEdit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Locked")]
        Locked = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationPermissionRoleView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TeamLead")]
        TeamLead = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Administrator")]
        Administrator = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"API")]
        API = 3,

    }

    /// <summary>
    /// Grants a permission level to a given role
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationRolePermissionEntryView : IntegrationPermissionEntryView
    {
        /// <summary>
        /// Role which is granted permission level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionRoleView Role { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationRolePermissionEntryViewType Type { get; set; }

    }

    /// <summary>
    /// Grants a permission level to a given team
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTeamPermissionEntryView : IntegrationPermissionEntryView
    {
        /// <summary>
        /// Team which is granted permission level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TeamUid { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationTeamPermissionEntryViewType Type { get; set; }

    }

    /// <summary>
    /// Grants a permission level to a given user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationUserPermissionEntryView : IntegrationPermissionEntryView
    {
        /// <summary>
        /// User who is granted permission level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UserUid { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationUserPermissionEntryViewType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterDurationView
    {
        /// <summary>
        /// Optional duration (minimum) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }

        /// <summary>
        /// Optional duration (maximum) to filter by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupCustomNumberPropFilterView
    {
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }

        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupFolderListView
    {
        /// <summary>
        /// Unique identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Title of folder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Optional description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupFolderListView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupFolderListView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupFolderView
    {
        /// <summary>
        /// Unique identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Title of folder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Optional description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupFolderView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupFolderView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupListView
    {
        /// <summary>
        /// Unique identity of the filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization filter belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// User who originally created the filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedByUserUid { get; set; }

        /// <summary>
        /// When the filter was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// User who last updated the filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UpdatedByUserUid { get; set; }

        /// <summary>
        /// When the filter was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedOn { get; set; }

        /// <summary>
        /// Name of the filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Values for the filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupValuesView Values { get; set; }

        /// <summary>
        /// Optional folder (root if null)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? FolderUid { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupListView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupListView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupNotTrackerFilterView
    {
        [Newtonsoft.Json.JsonProperty("uids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Uids { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupScoreFilterView
    {
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Min { get; set; }

        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupSentimentFilterView
    {
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationSentimentScoreView Score { get; set; }

        [Newtonsoft.Json.JsonProperty("speaker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationSentimentSpeakerView Speaker { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupTrackerFilterView
    {
        [Newtonsoft.Json.JsonProperty("uids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Uids { get; set; }

        [Newtonsoft.Json.JsonProperty("speakerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpeakerId { get; set; }

        [Newtonsoft.Json.JsonProperty("word", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Word { get; set; }

        [Newtonsoft.Json.JsonProperty("inverted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Inverted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupValuesView
    {
        [Newtonsoft.Json.JsonProperty("userUids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> UserUids { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterDurationView Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("subjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Subjects { get; set; }

        [Newtonsoft.Json.JsonProperty("customers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Customers { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("keyTopics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KeyTopics { get; set; }

        [Newtonsoft.Json.JsonProperty("teamUids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> TeamUids { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("trackers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationSavedFilterGroupTrackerFilterView> Trackers { get; set; }

        [Newtonsoft.Json.JsonProperty("notTrackers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationSavedFilterGroupNotTrackerFilterView> NotTrackers { get; set; }

        [Newtonsoft.Json.JsonProperty("sentiment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupSentimentFilterView Sentiment { get; set; }

        [Newtonsoft.Json.JsonProperty("scores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationSavedFilterGroupScoreFilterView> Scores { get; set; }

        [Newtonsoft.Json.JsonProperty("externalIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalIdentity { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customProp10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomProp10 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp1 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp2 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp3 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp6 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp7 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp8 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp9 { get; set; }

        [Newtonsoft.Json.JsonProperty("customNumberProp10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupCustomNumberPropFilterView CustomNumberProp10 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationSavedFilterGroupView
    {
        /// <summary>
        /// Unique identity of the saved filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization saved filter belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// User who originally created the saved filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedByUserUid { get; set; }

        /// <summary>
        /// When the saved filter was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// User who last updated the saved filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UpdatedByUserUid { get; set; }

        /// <summary>
        /// When the saved filter was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedOn { get; set; }

        /// <summary>
        /// Name of the saved filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Saved values for the saved filter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationSavedFilterGroupValuesView Values { get; set; }

        /// <summary>
        /// Optional folder (root if null)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? FolderUid { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.SavedFilterGroups.IntegrationSavedFilterGroupView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationMasterTrackerPresetView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryoneCanSee")]
        EveryoneCanSee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Admins")]
        Admins = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AdminTeamLeads")]
        AdminTeamLeads = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationPhraseNearnessSettingsView
    {
        /// <summary>
        /// Phrases that must be near (or not)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Phrases { get; set; }

        /// <summary>
        /// Speaker which must have uttered at least one of the phrases
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SpeakerId { get; set; }

        /// <summary>
        /// Seconds before occurrence a hit must have occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondsBefore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SecondsBefore { get; set; }

        /// <summary>
        /// Seconds after occurrence a hit must have occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondsAfter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SecondsAfter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationPhrasePrecisionView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HigherAccuracy")]
        HigherAccuracy = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MoreHits")]
        MoreHits = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationPhraseSettingsView
    {
        /// <summary>
        /// Optional nearness settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("near", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationPhraseNearnessSettingsView Near { get; set; }

        /// <summary>
        /// Optional not-nearness settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notNear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationPhraseNearnessSettingsView NotNear { get; set; }

        /// <summary>
        /// Optional precision to use for phrase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPhrasePrecisionView? Precision { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTextPhraseSettingsView
    {
        /// <summary>
        /// Phrases where at least one must occur _near_ the phrase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("near", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Near { get; set; }

        /// <summary>
        /// Phrases where none may occur _near_ the phrase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notNear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NotNear { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerFolderListView
    {
        /// <summary>
        /// Unique identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Title of folder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Optional description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional master replication settings
        /// <br/>            
        /// <br/>Requires the `EditMasterTraker` permission to enable or alter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerFolderMasterSettingsView MasterSettings { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerFolderListView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerFolderListView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerFolderMasterSettingsView
    {
        /// <summary>
        /// Which view preset should be used when replicating folders to targets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationMasterTrackerPresetView Preset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerFolderView
    {
        /// <summary>
        /// Unique identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Title of folder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Optional description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional master replication settings
        /// <br/>            
        /// <br/>Requires the `EditMasterTraker` permission to enable or alter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerFolderMasterSettingsView MasterSettings { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerFolderView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerFolderView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerListView
    {
        /// <summary>
        /// Unique identity of tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization dashboard belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Name of tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Optional description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// User who created tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedByUserUid { get; set; }

        /// <summary>
        /// Date and time when tracker was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// User who last updated the tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UpdatedByUserUid { get; set; }

        /// <summary>
        /// Date and time when the tracker was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// Whether tracker is currently being processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsProcessing { get; set; }

        /// <summary>
        /// If `IsProcessing` is `true`, this indicates how far processing has been completed.
        /// <br/>            
        /// <br/>Processing is performed from the newest data going backwards to the oldest data, so everything newer than
        /// <br/>this date have been processed, everything before it is being processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessingProgress { get; set; }

        /// <summary>
        /// Whether tracker text is currently being processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTextProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTextProcessing { get; set; }

        /// <summary>
        /// If `IsTextProcessing` is `true`, this indicates how far processing has been completed.
        /// <br/>            
        /// <br/>Processing is performed from the newest data going backwards to the oldest data, so everything newer than
        /// <br/>this date have been processed, everything before it is being processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textProcessingProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TextProcessingProgress { get; set; }

        /// <summary>
        /// Optional list of tags to search / filter trackers by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        /// <summary>
        /// Speech settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speech", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerSpeechSettingsView Speech { get; set; }

        /// <summary>
        /// Text settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerTextSettingsView Text { get; set; }

        /// <summary>
        /// Optional master replication settings
        /// <br/>            
        /// <br/>Requires the `EditMasterTraker` permission to enable or alter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerMasterSettingsView MasterSettings { get; set; }

        /// <summary>
        /// Optional folder (root if null)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? FolderUid { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerListView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerListView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerMasterSettingsView
    {
        /// <summary>
        /// Which view preset should be used when replicating folders to targets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationMasterTrackerPresetView Preset { get; set; }

        /// <summary>
        /// Which organisations should the tracker be replicated to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, IntegrationTrackerMasterTargetSettingsView> Targets { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerMasterTargetSettingsView
    {
        /// <summary>
        /// User identity to use when replicating tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UserUid { get; set; }

        /// <summary>
        /// Tracker identity in target organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackerUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? TrackerUid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerSpeechSettingsView
    {
        /// <summary>
        /// Words and phrases to match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Phrases { get; set; }

        /// <summary>
        /// Which speaker should be match (default `Both`)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speakerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SpeakerId { get; set; }

        /// <summary>
        /// Time filter within a conversation to match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerTimeFilterView TimeFilter { get; set; }

        /// <summary>
        /// Optional phrase settings, where `[key]` must match one of the words/phrases in `Words` and the provided
        /// <br/>settings for `value` is applied to that word/phrase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phrasesSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, IntegrationPhraseSettingsView> PhrasesSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerTextSettingsView
    {
        /// <summary>
        /// Phrases to search for
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Phrases { get; set; }

        /// <summary>
        /// Describes which part of the case messages to look at
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerTextMessageFiltersView MessageFilters { get; set; }

        /// <summary>
        /// Optional phrase-specific settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phrasesSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, IntegrationTextPhraseSettingsView> PhrasesSettings { get; set; }

        /// <summary>
        /// Optional global phrase settings, applied to all phrases on top of any per-phrase settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTextPhraseSettingsView GlobalSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationTrackerTimeFilterKindView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENTIRECONVERSATION")]
        ENTIRECONVERSATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FROMSTART")]
        FROMSTART = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FROMENDING")]
        FROMENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RANGE")]
        RANGE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerTimeFilterView
    {
        /// <summary>
        /// Amount of seconds to filter either from start or end of conversation depending value in Kind.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Seconds { get; set; }

        /// <summary>
        /// Amount of seconds to filter away from end of conversation, used for kind type Range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondsEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SecondsEnd { get; set; }

        /// <summary>
        /// How we should use seconds property. Entire conversation, from the beginning or from the ending of the conversation.
        /// <br/>Range is from Seconds up to SecondsEnd before the end of the conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationTrackerTimeFilterKindView Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerView
    {
        /// <summary>
        /// Unique identity of tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uid { get; set; }

        /// <summary>
        /// Organization dashboard belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OrganizationUid { get; set; }

        /// <summary>
        /// Name of tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Optional description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// User who created tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedByUserUid { get; set; }

        /// <summary>
        /// Date and time when tracker was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// User who last updated the tracker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedByUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UpdatedByUserUid { get; set; }

        /// <summary>
        /// Date and time when the tracker was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// Whether tracker is currently being processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsProcessing { get; set; }

        /// <summary>
        /// If `IsProcessing` is `true`, this indicates how far processing has been completed.
        /// <br/>            
        /// <br/>Processing is performed from the newest data going backwards to the oldest data, so everything newer than
        /// <br/>this date have been processed, everything before it is being processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessingProgress { get; set; }

        /// <summary>
        /// Whether tracker text is currently being processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTextProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTextProcessing { get; set; }

        /// <summary>
        /// If `IsTextProcessing` is `true`, this indicates how far processing has been completed.
        /// <br/>            
        /// <br/>Processing is performed from the newest data going backwards to the oldest data, so everything newer than
        /// <br/>this date have been processed, everything before it is being processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textProcessingProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TextProcessingProgress { get; set; }

        /// <summary>
        /// Optional list of tags to search / filter trackers by
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        /// <summary>
        /// Speech settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speech", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerSpeechSettingsView Speech { get; set; }

        /// <summary>
        /// Text settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerTextSettingsView Text { get; set; }

        /// <summary>
        /// Optional master replication settings
        /// <br/>            
        /// <br/>Requires the `EditMasterTraker` permission to enable or alter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntegrationTrackerMasterSettingsView MasterSettings { get; set; }

        /// <summary>
        /// Optional folder (root if null)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? FolderUid { get; set; }

        /// <summary>
        /// Permission preset in use, which determines default permissions and whether Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerView.ACL is taken into
        /// <br/>consideration or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPreset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationPermissionPresetView PermissionPreset { get; set; }

        /// <summary>
        /// For certain Capturi.Public.API.v2.ViewModels.Trackers.IntegrationTrackerView.PermissionPreset a user reference is required which identifies a user with
        /// <br/>elevated permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionPresetUserUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PermissionPresetUserUid { get; set; }

        /// <summary>
        /// Access Control List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IntegrationEveryonePermissionEntryView> Acl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegrationTrackerTextMessageFiltersView
    {
        /// <summary>
        /// The types of messages to match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MessageTypeView> MessageTypes { get; set; }

        /// <summary>
        /// The position of the message to match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messagePosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessagePositionView MessagePosition { get; set; }

        /// <summary>
        /// The fields of the messages to match
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MessageFieldView> MessageFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationInfoListResponseModel
    {
        [Newtonsoft.Json.JsonProperty("conversations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConversationInfoView> Conversations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveTopicConversationInfoListResponseModel
    {
        [Newtonsoft.Json.JsonProperty("conversations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TopicConversationInfoView> Conversations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveTopicPhrasesResponseModel
    {
        [Newtonsoft.Json.JsonProperty("phrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PhraseView> Phrases { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessagePositionView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConversationInfoView
    {
        [Newtonsoft.Json.JsonProperty("conversationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ConversationUid { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversationCustomer { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ConversationUserUid { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ConversationDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ConversationDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("offsets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Offsets { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationHasAudio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConversationHasAudio { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveTopicsView
    {
        [Newtonsoft.Json.JsonProperty("liveTopicsUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid LiveTopicsUid { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationsUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConversationsUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("processingStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProcessingStatusView ProcessingStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleView Role { get; set; }

        [Newtonsoft.Json.JsonProperty("topics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TopicView> Topics { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhraseView
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("hitrate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Hitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Index { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingStatusView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Successful")]
        Successful = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InsufficientDataError")]
        InsufficientDataError = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RoleView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicConversationInfoView
    {
        [Newtonsoft.Json.JsonProperty("conversationUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ConversationUid { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversationCustomer { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationUserUid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ConversationUserUid { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ConversationDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ConversationDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("conversationHasAudio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConversationHasAudio { get; set; }

        [Newtonsoft.Json.JsonProperty("phrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TopicConversationPhraseInfoView> Phrases { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicConversationPhraseInfoView
    {
        [Newtonsoft.Json.JsonProperty("phrase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phrase { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicDetailsView
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Hits { get; set; }

        [Newtonsoft.Json.JsonProperty("hitrate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Hitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("trend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Trend { get; set; }

        [Newtonsoft.Json.JsonProperty("hitsPreviousPeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HitsPreviousPeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("phrases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PhraseView> Phrases { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopicView
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Index { get; set; }

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Hits { get; set; }

        [Newtonsoft.Json.JsonProperty("hitrate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Hitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("trend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Trend { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpValidationProblemDetails : ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationEveryonePermissionEntryViewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"everyone")]
        Everyone = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationRolePermissionEntryViewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"role")]
        Role = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationTeamPermissionEntryViewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IntegrationUserPermissionEntryViewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625